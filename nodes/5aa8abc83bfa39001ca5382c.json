{
  "_id": "5aa8abc83bfa39001ca5382c",
  "nodeId": "5aa8abc73bfa39001ca5382b",
  "type": "code:0.0.1:local:32498h32f2",
  "data": {
    "key": "18758d2d-4380-4475-b694-15290a223074",
    "code": "(()=>{\n  return new Promise(async (resolve, reject)=>{\n    try {\n      \n      // Expecting INPUT = capability_input_node:0.0.1:local:29f8239a13h9\n      // - capabilityNode: Object,\n      // - externalInputNode: Object,\n      \n      // Load the \"Identify with Remote Second\" capability\n      // order_level:0.0.1:local:382hf273\n      \n      let cmdInputNode = INPUT.data.externalInputNode;\n      \n      if(cmdInputNode.type != 'standard_capability_action:0.0.1:local:298j291bs'){\n        console.log('Unexpected input schema');\n        return reject();\n      }\n      \n      let inputAction = cmdInputNode.data.action;\n      let inputOpts = cmdInputNode.data.options;\n      \n      const s3 = new universe.aws.S3();\n      \n      console.log('Loaded Capability: File');\n            \n      switch(inputAction){\n        case 'signUpload':\n          \n          // inputOpts: {\n          //   type: 'request_file_upload:0.0.1:local:00838923flkwne',\n          //   data: {\n          //     fileName: String,\n          //     fileType: String\n          //   }\n          // }\n            \n          try {\n              \n            // const fileName = inputOpts.data.fileName; // keep file extensions? \n            const fileName = universe.uuidv4(); // + '.png';\n            \n            const fileType = inputOpts.data.fileType;\n            const s3Params = {\n              Bucket: universe.env.S3_BUCKET,\n              Key: fileName,\n              Expires: 60,\n              ContentType: fileType,\n              // ACL: 'public-read'\n              ACL: 'private'\n            };\n          \n            s3.getSignedUrl('putObject', s3Params, (err, data) => {\n              \n              if(err){\n                universe.console.log('aws error:', err);\n                    \n                return resolve({\n                  // savedNode\n                  type: 'error2:..',\n                  data: {\n                    inputOpts,\n                    error: true,\n                    err: err\n                  }\n                });\n                // return res.end();\n              }\n              \n              const returnData = {\n                signedRequest: data,\n                url: `https://${universe.env.S3_BUCKET}.s3.amazonaws.com/${fileName}`,\n                key: fileName\n              };\n              // res.write(JSON.stringify(returnData));\n              // res.end();\n              \n              return resolve({\n                type: 'sign_upload_response:0.0.1:local:2891785cvw',\n                data: returnData\n              });\n              \n            });\n            \n          }catch(err){\n            console.error('SIGN ERROR!');\n            return resolve({\n              // savedNode\n              type: 'error:..',\n              data: {\n                msg: 'failed sign_upload',\n                INPUT,\n                error: true,\n                err: err\n              }\n            });\n          }\n          break;\n        \n        case 'signGet':\n        \n          // inputOpts: {\n          //   type: 'request_file_upload:0.0.1:local:00838923flkwne',\n          //   data: {\n          //     key: String,\n          //   }\n          // }\n            \n          try {\n            \n            universe.console.log('Capability: signGet');\n            \n            const myBucket = universe.env.S3_BUCKET;\n            const myKey = inputOpts.data.key;\n            const signedUrlExpireSeconds = 60 * 1; // 1 minutes\n            \n            const signedUrl = s3.getSignedUrl('getObject', {\n                Bucket: myBucket,\n                Key: myKey,\n                Expires: signedUrlExpireSeconds\n            })\n            \n            universe.console.log('Capability: signGet DONE');\n            \n            return resolve({\n              type: 'sign_get_response:0.0.1:local:8923782hf87sdjkh6',\n              data: {\n                url: signedUrl\n              }\n            });\n            \n            \n          }catch(err){\n            return resolve({\n              // savedNode\n              type: 'error:..',\n              data: {\n                msg: 'failed sign_get',\n                INPUT,\n                error: true,\n                err: err\n              }\n            });\n          }\n          break;\n        \n        default:\n          break;\n      }\n      \n        \n    }catch(err){\n      resolve({ERROR: true, err: err});\n    }\n    \n    \n  })\n})()"
  },
  "active": true,
  "createdAt": 1521003464387,
  "updatedAt": null
}