{
  "_id": "5aa8ab943bfa39001ca537de",
  "nodeId": "5aa8ab933bfa39001ca537dd",
  "type": "code:0.0.1:local:32498h32f2",
  "data": {
    "key": "90bd3427-5301-415d-ac12-c3f9a3c530d0",
    "code": "(()=>{\n  return new Promise(async (resolve, reject)=>{\n    try {\n      \n      // Expecting INPUT = capability_input_node:0.0.1:local:29f8239a13h9\n      // - capabilityNode: Object,\n      // - externalInputNode: Object,\n      \n      // Load the \"Identify with Remote Second\" capability\n      // order_level:0.0.1:local:382hf273\n      \n      let cmdInputNode = INPUT.data.externalInputNode;\n      \n      if(cmdInputNode.type != 'standard_capability_action:0.0.1:local:298j291bs'){\n        console.log('Unexpected input schema');\n        return reject();\n      }\n      \n      let inputAction = cmdInputNode.data.action;\n      let inputOpts = cmdInputNode.data.options;\n      \n      switch(inputAction){\n        case 'make':\n        \n          console.log('Make Request inputOpts', inputOpts);\n          \n          // Make a request to an external Second \n          // inputOpts: {\n          //   ExternalIdentityNode, // must include connect_method\n          //   RequestNode: InitiateIdentifyNode\n          // }\n          \n          // let ExternalRequestNode = inputOpts.ExternalIdentityNode;\n\n          // ExternalIdentityNode needs to have a NodeChild w/ a connect_method \n          let connectNode = universe.lodash.find(inputOpts.ExternalIdentityNode.nodes, {type: 'external_identity_connect_method:0.0.1:local:382989239hsdfmn'});\n          if(!connectNode){\n            console.error('Missing ConnectNode!');\n            return reject({\n              type: 'internal_error_output:0.0.1:local:32948x2u3cno2c',\n              data: {\n                str: 'Missing existing ExternalIdentity connect_method child!'\n              }\n            })\n          }\n\n          console.log('Making external request');\n\n          // make web request\n          // - just passing through, assume any Auth is already included? \n          let response = await universe.directToSecond({\n            url: connectNode.data.connection,\n            RequestNode: inputOpts.RequestNode,\n            // method: 'post',\n            // url: connectNode.data.connection, // expecting URL at first! \n            // body: ExternalRequestNode.data.RequestNode,\n            // json: true\n          })\n\n          // ONLY returning a \"second\" response! (no other URL is allowed besides this, for now) \n          return resolve(response.secondResponse);\n          \n        default:\n          break;\n      }\n      \n      return reject();\n        \n    }catch(err){\n      resolve({ERROR: true, err: err.toString()});\n    }\n    \n    \n  })\n})()"
  },
  "active": true,
  "createdAt": 1521003412269,
  "updatedAt": null
}